--- bsec_integration.c
+++ bsec_integration.c
@@ -68,6 +68,9 @@
 #include <stdint.h>
 #include <string.h>
 #include "bsec_integration.h"
+#include "freertos/FreeRTOS.h"
+#include "freertos/task.h"
+
 
 static struct bme69x_conf bme69x_config[NUM_OF_SENS];
 static struct bme69x_dev bme69x[NUM_OF_SENS];
@@ -156,7 +159,7 @@
     if (num_bsec_outputs == 0)
         return;
     
-    outputs_t output;
+    static outputs_t output;
     memset(&output, 0, sizeof(output));
 
     for (uint8_t id = 0; id < num_bsec_outputs; id++)
@@ -245,7 +248,7 @@
         }
         output.timestamp = bsec_outputs[id].time_stamp;
     }
-
+/*
     char msg[300] = {0};
 
 #if (OUTPUT_MODE == IAQ)
@@ -259,7 +262,8 @@
                 output.gas_accuracy_1, output.gas_accuracy_2, output.gas_accuracy_3, output.gas_accuracy_4,
                 output.raw_pressure, output.raw_temp, output.raw_humidity, output.raw_gas, output.raw_gas_index, bsec_status);
 #endif
-    output_ready(msg);
+*/
+    output_ready(&output);
 }
 
 static uint8_t process_data(int64_t currTimeNs, struct bme69x_data data, int32_t bsec_process_data, uint8_t sens_no, output_ready_fct output_ready)
@@ -457,12 +461,13 @@
 	return 0;
 }
 
+static uint8_t bsec_config[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
+static uint8_t work_buffer[BSEC_MAX_WORKBUFFER_SIZE] = {0};
+static uint8_t bsec_state[BSEC_MAX_STATE_BLOB_SIZE] = {0};
+
 return_values_init bsec_iot_init(float sample_rate, bme69x_interface_fct bme69x_intf_init, state_load_fct state_load, config_load_fct config_load)
 {
     return_values_init ret = {BME69X_OK, BSEC_OK};
-    uint8_t bsec_config[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
-    uint8_t work_buffer[BSEC_MAX_WORKBUFFER_SIZE] = {0};
-    uint8_t bsec_state[BSEC_MAX_STATE_BLOB_SIZE] = {0};
     uint32_t bsec_state_len;
 
     /*
@@ -480,7 +485,7 @@
         memset(&bme69x[sens_no], 0, sizeof(bme69x[sens_no]));
 
         // sensor communication
-        bme69x_intf_init(&bme69x[sens_no], BME69X_SPI_INTF, sens_no);
+        bme69x_intf_init(&bme69x[sens_no], BME69X_I2C_INTF, sens_no);
 
         // bme69x initialization
         ret.bme69x_status = bme69x_init(&bme69x[sens_no]);
@@ -516,11 +521,12 @@
 
 void bsec_iot_loop(state_save_fct state_save, get_timestamp_ms_fct get_timestamp_ms, output_ready_fct output_ready)
 {
-    uint8_t work_buffer[BSEC_MAX_WORKBUFFER_SIZE] = {0};
-    uint8_t bsec_state[BSEC_MAX_STATE_BLOB_SIZE] = {0};
     uint32_t bsec_state_len;
     uint64_t time_stamp = 0;
-    
+
+    memset(work_buffer, 0, sizeof(work_buffer));
+    memset(bsec_state, 0, sizeof(bsec_state));
+   
     /* BSEC sensor settings struct */
     bsec_bme_settings_t sensor_settings[NUM_OF_SENS];
 
@@ -539,6 +545,7 @@
 	
     while (1)
     {
+        vTaskDelay(50); // Minimum 1ms yield for ESP32
         for (uint8_t sens_no = 0; sens_no < n_sensors; sens_no++)
         {
             uint8_t nFieldsLeft = 0;

